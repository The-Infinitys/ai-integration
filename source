===========src/utils.rs
===========
===========src/modules/agent.rs
// src/modules/agent.rs
pub mod api;
use api::AIApi;
use chrono;
use std::collections::HashMap;
type NoteTag = Vec<String>;
pub struct AIAgent {
    // システムプロンプト。AIが自分の役割や自分の機能を理解するためのデータを入れておく。
    system: HashMap<String, String>,
    // チャット履歴
    chat: Vec<Message>,
    // AIに対してデータを送信したりするために使用するAPIの情報を保存する
    api: AIApi,
    // AIがメモを書き記すのに使う。
    note: HashMap<NoteTag, Note>,
}
struct Note {
    title: String, // ノートのタイトルを表す
    data: String,  // ノートの内容を表す
}
struct Message {
    from: Character,                     // 誰からのメッセージか
    to: Character,                       // 誰に向けたメッセージか
    date: chrono::DateTime<chrono::Utc>, // いつメッセージが送信されたかを表す
    text: String,                        // メッセージの内容
}
enum Character {
    Agent, // AI自身を表す
    User,  // AIを使用しているユーザーを表す
    Cmd,   // AIが使用するコマンドラインからの出力であることを表す
}
===========
===========src/modules/agent/api.rs
use std::collections::HashMap;

pub struct AIApi{
    info:HashMap<String,String>, // APIを使用するためのURLや認証情報を入れておく
}
impl AIApi{
    
}
pub enum ApiType{
    Ollama
}

// TODO OpenAIApi, GeminiAIApiなど、様々なサービスを使用して===========
===========src/modules/aurascript.rs
/// AIが使用するコマンドラインを設定する
///
/// ## 例
///
/// ```bash
/// !ls                     # ターミナルのコマンドを実行する
/// /web_search Rust Google # 予め使用できるコマンドを設定しておき、AIが利用できるようにする
/// ```
///
///
pub struct AuraScriptRunner {
    scripts: Vec<String>,
}
===========
===========src/modules.rs
pub mod agent;
pub mod aurascript;===========
===========src/lib.rs
pub mod modules;
pub mod utils;
===========
===========src/main.rs
fn main() {
    println!("Hello");
}
===========
